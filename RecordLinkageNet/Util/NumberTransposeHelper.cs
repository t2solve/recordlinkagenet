using System.Diagnostics;

namespace RecordLinkage.Core
{
    public class NumberTransposeHelper
    {
        public enum TransposeModus
        {
            UNKNOWN,
            LINEAR,
            LOG10
        }
        /* #create table via r script
        rm(list=ls())
        x <- rep(1:256)
        #calc distribution values
        z =log10(x) / 2.408
        #plot(x,z) #print(z)
        write.table(z,file='2023-03-05-log-table.csv', sep = ";", row.names = FALSE)
        */
        //256 log 10 array value with 
        private readonly static float[] log10ValueRange0to1 =
        {
              0f,
              0.125012456671089f,
              0.198140055946704f,
              0.250024913342177f,
              0.29026993535549f,
              0.323152512617792f,
              0.350954335554093f,
              0.375037370013266f,
              0.396280111893407f,
              0.415282392026578f,
              0.432472045331489f,
              0.448164969288881f,
              0.462601059928088f,
              0.475966792225182f,
              0.488409991302193f,
              0.500049826684354f,
              0.510983771336493f,
              0.521292568564496f,
              0.531043854216291f,
              0.540294848697667f,
              0.549094391500797f,
              0.557484502002577f,
              0.565501593030562f,
              0.573177425959969f,
              0.580539870710979f,
              0.587613516599177f,
              0.594420167840111f,
              0.60097924889627f,
              0.607308138662357f,
              0.613422447973282f,
              0.619336251592306f,
              0.625062283355443f,
              0.630612101278193f,
              0.635996228007581f,
              0.641224270909583f,
              0.646305025235584f,
              0.651246563150745f,
              0.65605631088738f,
              0.660741115874792f,
              0.665307305368755f,
              0.669760737840422f,
              0.674106848171886f,
              0.678350687533051f,
              0.682496958673666f,
              0.686550047248897f,
              0.69051404970165f,
              0.694392798146062f,
              0.698189882631058f,
              0.701908671108187f,
              0.705552327382068f,
              0.709123827283196f,
              0.712625973270265f,
              0.716061407641524f,
              0.7194326245112f,
              0.722741980686978f,
              0.725991705567359f,
              0.729183910162995f,
              0.732320595333446f,
              0.735403659319827f,
              0.73843490464437f,
              0.741416044439687f,
              0.744348708263394f,
              0.747234447447501f,
              0.750074740026531f,
              0.752870995283578f,
              0.755624557949281f,
              0.758336712085061f,
              0.76100868467867f,
              0.763641648977265f,
              0.766236727580672f,
              0.768794995315231f,
              0.771317481906673f,
              0.773805174468628f,
              0.776259019821834f,
              0.778679926657683f,
              0.781068767558468f,
              0.783426380885582f,
              0.785753572545881f,
              0.788051117645532f,
              0.790319762039844f,
              0.792560223786815f,
              0.79477319451151f,
              0.796959340687738f,
              0.799119304842974f,
              0.801253706691982f,
              0.803363144204139f,
              0.805448194609061f,
              0.807509415344755f,
              0.809547344952206f,
              0.811562503919985f,
              0.813555395482182f,
              0.815526506372739f,
              0.81747630753901f,
              0.819405254817151f,
              0.821313789571781f,
              0.823202339302146f,
              0.825071318216879f,
              0.826921127779275f,
              0.828752157224896f,
              0.830564784053156f,
              0.832359374494453f,
              0.834136283954285f,
              0.835895857435703f,
              0.837638429941354f,
              0.839364326856287f,
              0.841073864312612f,
              0.842767349537047f,
              0.844445081182288f,
              0.846107349643116f,
              0.847754437358067f,
              0.849386619097449f,
              0.851004162238448f,
              0.852607327027998f,
              0.854196366834083f,
              0.855771528386051f,
              0.857333052004534f,
              0.858881171821496f,
              0.860416115990916f,
              0.861938106890586f,
              0.863447361315459f,
              0.864944090662978f,
              0.866428501110776f,
              0.867900793787125f,
              0.869361164934483f,
              0.870809806066469f,
              0.872246904118589f,
              0.873672641593005f,
              0.87508719669762f,
              0.876490743479755f,
              0.877883451954667f,
              0.879265488229138f,
              0.88063701462037f,
              0.881998189770384f,
              0.883349168756149f,
              0.884690103195601f,
              0.886021141349758f,
              0.887342428221099f,
              0.888654105648354f,
              0.88995631239788f,
              0.89124918425176f,
              0.892532854092766f,
              0.893807451986319f,
              0.895073105259577f,
              0.896329938577762f,
              0.897578074017847f,
              0.898817631139716f,
              0.90004872705489f,
              0.901271476492923f,
              0.902485991865562f,
              0.903692383328771f,
              0.904890758842678f,
              0.906081224229557f,
              0.9072638832299f,
              0.908438837556671f,
              0.909606186947795f,
              0.910766029216969f,
              0.911918460302838f,
              0.913063574316621f,
              0.914201463588227f,
              0.915332218710932f,
              0.916455928584655f,
              0.917572680457903f,
              0.918682559968421f,
              0.919785651182599f,
              0.920882036633682f,
              0.921971797358827f,
              0.923055012935043f,
              0.924131761514063f,
              0.925202119856177f,
              0.926266163363071f,
              0.927323966109698f,
              0.928375600875228f,
              0.929421139173088f,
              0.930460651280149f,
              0.931494206265073f,
              0.932521872015843f,
              0.933543715266531f,
              0.934559801623295f,
              0.935570195589657f,
              0.936574960591074f,
              0.937574158998831f,
              0.93856785215327f,
              0.939556100386391f,
              0.940538963043827f,
              0.941516498506235f,
              0.942488764210098f,
              0.943455816667981f,
              0.944417711488239f,
              0.945374503394204f,
              0.946326246242869f,
              0.947272993043076f,
              0.948214795973235f,
              0.949151706398577f,
              0.950083774887968f,
              0.951011051230282f,
              0.951933584450364f,
              0.952851422824582f,
              0.953764613895985f,
              0.954673204489081f,
              0.955577240724245f,
              0.956476768031765f,
              0.957371831165541f,
              0.958262474216451f,
              0.959148740625373f,
              0.960030673195911f,
              0.960908314106791f,
              0.961781704923969f,
              0.962650886612442f,
              0.96351589954778f,
              0.964376783527375f,
              0.965233577781434f,
              0.966086320983701f,
              0.966935051261934f,
              0.967779806208136f,
              0.96862062288854f,
              0.969457537853377f,
              0.970290587146399f,
              0.971119806314205f,
              0.971945230415332f,
              0.972766894029155f,
              0.973584831264581f,
              0.974399075768538f,
              0.975209660734286f,
              0.976016618909536f,
              0.976819982604387f,
              0.977619783699087f,
              0.978416053651629f,
              0.979208823505172f,
              0.979998123895302f,
              0.98078398505714f,
              0.981566436832286f,
              0.982345508675623f,
              0.983121229661968f,
              0.983893628492584f,
              0.984662733501552f,
              0.985428572662004f,
              0.986191173592236f,
              0.986950563561674f,
              0.987706769496735f,
              0.988459817986547f,
              0.989209735288567f,
              0.989956547334066f,
              0.990700279733518f,
              0.991440957781864f,
              0.992178606463676f,
              0.992913250458214f,
              0.993644914144379f,
              0.994373621605572f,
              0.995099396634442f,
              0.995822262737557f,
              0.996542243139966f,
              0.997259360789678f,
              0.997973638362051f,
              0.998685098264094f,
              0.999393762638686f,
              1.0f
        };

        /* # create table via r script
         * rm(list=ls())
           x <- rep(0:255)
        #calc distribution values
        y = (x / 255)
        plot(x,y)#print(y)
        write.table(z,file='2023-03-05-log-table.csv', sep = ";", row.names = FALSE)
        */
        //256 linear steps 
        private static readonly float[] linearValueRange0to1 =
        {
              0f,
              0.00392156862745098f,
              0.00784313725490196f,
              0.0117647058823529f,
              0.0156862745098039f,
              0.0196078431372549f,
              0.0235294117647059f,
              0.0274509803921569f,
              0.0313725490196078f,
              0.0352941176470588f,
              0.0392156862745098f,
              0.0431372549019608f,
              0.0470588235294118f,
              0.0509803921568627f,
              0.0549019607843137f,
              0.0588235294117647f,
              0.0627450980392157f,
              0.0666666666666667f,
              0.0705882352941176f,
              0.0745098039215686f,
              0.0784313725490196f,
              0.0823529411764706f,
              0.0862745098039216f,
              0.0901960784313725f,
              0.0941176470588235f,
              0.0980392156862745f,
              0.101960784313725f,
              0.105882352941176f,
              0.109803921568627f,
              0.113725490196078f,
              0.117647058823529f,
              0.12156862745098f,
              0.125490196078431f,
              0.129411764705882f,
              0.133333333333333f,
              0.137254901960784f,
              0.141176470588235f,
              0.145098039215686f,
              0.149019607843137f,
              0.152941176470588f,
              0.156862745098039f,
              0.16078431372549f,
              0.164705882352941f,
              0.168627450980392f,
              0.172549019607843f,
              0.176470588235294f,
              0.180392156862745f,
              0.184313725490196f,
              0.188235294117647f,
              0.192156862745098f,
              0.196078431372549f,
              0.2f,
              0.203921568627451f,
              0.207843137254902f,
              0.211764705882353f,
              0.215686274509804f,
              0.219607843137255f,
              0.223529411764706f,
              0.227450980392157f,
              0.231372549019608f,
              0.235294117647059f,
              0.23921568627451f,
              0.243137254901961f,
              0.247058823529412f,
              0.250980392156863f,
              0.254901960784314f,
              0.258823529411765f,
              0.262745098039216f,
              0.266666666666667f,
              0.270588235294118f,
              0.274509803921569f,
              0.27843137254902f,
              0.282352941176471f,
              0.286274509803922f,
              0.290196078431373f,
              0.294117647058824f,
              0.298039215686275f,
              0.301960784313725f,
              0.305882352941176f,
              0.309803921568627f,
              0.313725490196078f,
              0.317647058823529f,
              0.32156862745098f,
              0.325490196078431f,
              0.329411764705882f,
              0.333333333333333f,
              0.337254901960784f,
              0.341176470588235f,
              0.345098039215686f,
              0.349019607843137f,
              0.352941176470588f,
              0.356862745098039f,
              0.36078431372549f,
              0.364705882352941f,
              0.368627450980392f,
              0.372549019607843f,
              0.376470588235294f,
              0.380392156862745f,
              0.384313725490196f,
              0.388235294117647f,
              0.392156862745098f,
              0.396078431372549f,
              0.4f,
              0.403921568627451f,
              0.407843137254902f,
              0.411764705882353f,
              0.415686274509804f,
              0.419607843137255f,
              0.423529411764706f,
              0.427450980392157f,
              0.431372549019608f,
              0.435294117647059f,
              0.43921568627451f,
              0.443137254901961f,
              0.447058823529412f,
              0.450980392156863f,
              0.454901960784314f,
              0.458823529411765f,
              0.462745098039216f,
              0.466666666666667f,
              0.470588235294118f,
              0.474509803921569f,
              0.47843137254902f,
              0.482352941176471f,
              0.486274509803922f,
              0.490196078431373f,
              0.494117647058824f,
              0.498039215686275f,
              0.501960784313725f,
              0.505882352941176f,
              0.509803921568627f,
              0.513725490196078f,
              0.517647058823529f,
              0.52156862745098f,
              0.525490196078431f,
              0.529411764705882f,
              0.533333333333333f,
              0.537254901960784f,
              0.541176470588235f,
              0.545098039215686f,
              0.549019607843137f,
              0.552941176470588f,
              0.556862745098039f,
              0.56078431372549f,
              0.564705882352941f,
              0.568627450980392f,
              0.572549019607843f,
              0.576470588235294f,
              0.580392156862745f,
              0.584313725490196f,
              0.588235294117647f,
              0.592156862745098f,
              0.596078431372549f,
              0.6f,
              0.603921568627451f,
              0.607843137254902f,
              0.611764705882353f,
              0.615686274509804f,
              0.619607843137255f,
              0.623529411764706f,
              0.627450980392157f,
              0.631372549019608f,
              0.635294117647059f,
              0.63921568627451f,
              0.643137254901961f,
              0.647058823529412f,
              0.650980392156863f,
              0.654901960784314f,
              0.658823529411765f,
              0.662745098039216f,
              0.666666666666667f,
              0.670588235294118f,
              0.674509803921569f,
              0.67843137254902f,
              0.682352941176471f,
              0.686274509803922f,
              0.690196078431373f,
              0.694117647058824f,
              0.698039215686274f,
              0.701960784313725f,
              0.705882352941177f,
              0.709803921568627f,
              0.713725490196078f,
              0.717647058823529f,
              0.72156862745098f,
              0.725490196078431f,
              0.729411764705882f,
              0.733333333333333f,
              0.737254901960784f,
              0.741176470588235f,
              0.745098039215686f,
              0.749019607843137f,
              0.752941176470588f,
              0.756862745098039f,
              0.76078431372549f,
              0.764705882352941f,
              0.768627450980392f,
              0.772549019607843f,
              0.776470588235294f,
              0.780392156862745f,
              0.784313725490196f,
              0.788235294117647f,
              0.792156862745098f,
              0.796078431372549f,
              0.8f,
              0.803921568627451f,
              0.807843137254902f,
              0.811764705882353f,
              0.815686274509804f,
              0.819607843137255f,
              0.823529411764706f,
              0.827450980392157f,
              0.831372549019608f,
              0.835294117647059f,
              0.83921568627451f,
              0.843137254901961f,
              0.847058823529412f,
              0.850980392156863f,
              0.854901960784314f,
              0.858823529411765f,
              0.862745098039216f,
              0.866666666666667f,
              0.870588235294118f,
              0.874509803921569f,
              0.87843137254902f,
              0.882352941176471f,
              0.886274509803922f,
              0.890196078431372f,
              0.894117647058824f,
              0.898039215686275f,
              0.901960784313726f,
              0.905882352941176f,
              0.909803921568627f,
              0.913725490196078f,
              0.917647058823529f,
              0.92156862745098f,
              0.925490196078431f,
              0.929411764705882f,
              0.933333333333333f,
              0.937254901960784f,
              0.941176470588235f,
              0.945098039215686f,
              0.949019607843137f,
              0.952941176470588f,
              0.956862745098039f,
              0.96078431372549f,
              0.964705882352941f,
              0.968627450980392f,
              0.972549019607843f,
              0.976470588235294f,
              0.980392156862745f,
              0.984313725490196f,
              0.988235294117647f,
              0.992156862745098f,
              0.996078431372549f,
              1.0f
        };

        public static byte TransposeFloatToByteRange01(float x, TransposeModus m = TransposeModus.LOG10)
        {
            //short cuts
            if (x == 0.0f)
                return 0;
            if (x == 1.0f)
                return 255;

            if (x > 1.0f)
            {
                Trace.WriteLine("warning: 20932093 transposed x out of range [0 - 1] :" + x);
                return 255;
            }
            if (x < 0.0f)
            {
                Trace.WriteLine("warning: 3425345345 transposed x out of range [0 - 1] :" + x);
                return 0;
            }
            //TODO use faster look up , avoid for
            for (byte i = 0; i < 255; i++)
            {
                if (m == TransposeModus.LOG10)
                {
                    if (log10ValueRange0to1[i] >= x)
                        return i;
                }
                if (m == TransposeModus.LINEAR)
                {
                    if (linearValueRange0to1[i] >= x)
                        return i;
                }
            }
            return 0;
        }

        public static float TransposeByteToFloatRange01(byte x, TransposeModus m = TransposeModus.LOG10)
        {
            //short cuts
            if (x == 0)
                return 0.0f;
            if (x == 255)
                return 1.0f;
            if (m == TransposeModus.LOG10)
            {
                return log10ValueRange0to1[x];
            }
            if (m == TransposeModus.LINEAR)
            {
                return linearValueRange0to1[x];
            }
            return -1.0f;
        }



    }
}
