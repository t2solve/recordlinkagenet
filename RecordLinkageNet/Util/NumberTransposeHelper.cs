using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RecordLinkage.Core
{
    public class NumberTransposeHelper
    {
        public enum TransposeModus
        {
            UNKNOWN,
            LINEAR,
            LOG10
        }
        /* #create table via r script
        rm(list=ls())
        #steps
        x <- rep(1:255)
        #calc distribution values
        y =log10(x) / 2.405
        #plot(y)print(y)
        data = data.frame(x,y)
        write.table(data,file='2022-11-04-transpose-table.csv', sep = ";", row.names = FALSE)
        */
        //255 log 10 array value with 
        private readonly static float[] log10ValueRange0to1 =
        {       0f, 0.125168397365481f, 0.198387216099652f, 0.250336794730962f, 0.290632018434935f, 0.323555613465133f, 0.351392116430044f, 0.375505192096442f, 0.396774432199304f, 0.415800415800416f, 0.433011511500301f, 0.448724010830613f, 0.463178109067292f, 0.476560513795525f, 0.489019234534587f,
                0.500673589461923f, 0.511621173130259f, 0.521942829564784f, 0.531706278982465f, 0.540968813165897f, 0.549779332529696f, 0.558179908865782f, 0.566207000423116f, 0.573892408196094f, 0.58126403686987f, 0.588346506432773f, 0.595161648298955f, 0.601728911161006f, 0.608065695592082f, 0.614187631900068f, 0.620108812405103f, 0.625841986827404f, 0.631398727599953f, 0.63678957049574f,
                0.64202413486498f, 0.647111226930265f, 0.652058928925985f, 0.656874676347946f, 0.661565325166944f, 0.666137210531377f, 0.670596198220264f, 0.674947729895177f, 0.679196863026855f, 0.683348306231263f, 0.687406450634239f, 0.691375397788596f, 0.695258984588656f, 0.699060805561575f, 0.702784232860089f, 0.706432434235351f,
                0.710008389229911f, 0.713514903798253f, 0.716954623534632f, 0.720330045664436f, 0.723643529935237f, 0.726897308526487f, 0.730093495082117f, 0.733234092957562f, 0.736321002761806f, 0.739356029265548f, 0.742340887738365f, 0.745277209770584f, 0.748166548629348f, 0.751010384192884f, 0.753810127502227f, 0.756567124965434f, 0.759282662245666f, 0.761957967861221f,
                0.764594216522767f, 0.76719253223046f, 0.769753991151383f, 0.772279624295746f, 0.774770420008506f, 0.777227326291466f, 0.779651252969522f, 0.782043073713427f, 0.784403627930346f, 0.786733722532424f, 0.789034133592699f, 0.791305607896858f, 0.793548864398607f, 0.795764595585745f, 0.79795346876344f, 0.800116127260658f, 0.802253191565195f, 0.804365260392336f, 0.806452911691733f,
                0.808516703596744f, 0.81055717532013f, 0.812574847999719f, 0.814570225497336f, 0.816543795154077f, 0.818496028504755f, 0.820427381954137f, 0.8223382974174f, 0.824229202927056f, 0.826100513208418f, 0.82795263022557f, 0.829785943699605f, 0.831600831600832f, 0.833397660616483f, 0.835176786595392f, 0.836938554970966f, 0.838683301163734f, 0.840411350964631f, 0.842123020900112f,
                0.843818618580129f, 0.845498443029917f, 0.847162785006496f, 0.848811927300717f, 0.850446145025637f, 0.852065705891967f, 0.853670870471277f, 0.855261892447598f, 0.856839018858051f, 0.858402490323043f, 0.859952541266595f, 0.861489400127287f, 0.863013289560304f, 0.864524426631029f, 0.866023023000603f, 0.867509285103846f, 0.868983414319916f, 0.870445607136065f, 0.871896055304805f,
                0.873334945994829f, 0.874762461935949f, 0.876178781558365f, 0.877584079126507f, 0.878978524867708f, 0.880362285095952f, 0.881735522330915f, 0.88309839541251f, 0.884451059611147f, 0.88579366673389f, 0.887126365226702f, 0.888449300272934f, 0.889762613888248f, 0.891066445012098f, 0.892360929595941f, 0.893646200688308f, 0.894922388516863f, 0.896189620567593f, 0.897448021661227f,
                0.898697714027017f, 0.899938817373986f, 0.901171448959741f, 0.902395723656947f, 0.903611754017578f, 0.904819650335003f, 0.906019520704021f, 0.907211471078908f, 0.908395605329563f, 0.909572025295827f, 0.910740830840038f, 0.911902119897905f, 0.913055988527748f, 0.91420253095818f, 0.915341839634283f, 0.916474005262339f, 0.91759911685316f, 0.918717261764088f, 0.919828525739691f,
                0.920932992951226f, 0.922030746034888f, 0.923121866128921f, 0.924206432909598f, 0.925284524626138f, 0.926356218134584f, 0.927421588930675f, 0.928480711181769f, 0.929533657757817f, 0.930580500261453f, 0.931621309057214f, 0.932656153299915f, 0.933685100962225f, 0.934708218861458f, 0.935725572685611f, 0.936737227018667f, 0.9377432453652f, 0.938743690174297f, 0.939738622862817f,
                0.940728103838016f, 0.941712192519558f, 0.942690947360921f, 0.943664425870236f, 0.944632684630561f, 0.945595779319618f, 0.946553764729f, 0.947506694782881f, 0.948454622556228f, 0.949397600292536f, 0.950335679421112f, 0.951268910573899f, 0.952197343601879f, 0.95312102759105f, 0.954040010878001f, 0.954954341065086f, 0.955864065035221f, 0.956769228966312f, 0.957669878345318f,
                0.958566057981964f, 0.959457812022126f, 0.960345183960873f, 0.961228216655199f, 0.962106952336446f, 0.962981432622419f, 0.963851698529215f, 0.964717790482767f, 0.965579748330112f, 0.966437611350392f, 0.967291418265593f, 0.968141207251034f, 0.96898701594561f, 0.96982888146179f, 0.970666840395397f, 0.971500928835147f, 0.972331182371977f, 0.973157636108157f, 0.973980324666198f,
                0.974799282197551f, 0.975614542391118f, 0.976426138481564f, 0.977234103257448f, 0.978038469069174f, 0.978839267836757f, 0.979636531057431f, 0.980430289813079f, 0.9812205747775f, 0.982007416223531f, 0.982790844029998f, 0.983570887688524f, 0.984347576310195f, 0.985120938632076f, 0.985891003023591f, 0.986657797492768f, 0.987421349692351f, 0.988181686925785f, 0.988938836153072f,
                0.98969282399651f, 0.990443676746307f, 0.991191420366084f, 0.991936080498259f, 0.992677682469326f, 0.993416251295024f, 0.994151811685397f, 0.994884388049757f, 0.995614004501545f, 0.996340684863092f, 0.997064452670286f, 0.997785331177147f, 0.99850334336031f, 0.999218511923417f, 0.99993085930143f, 1.0f };

        /* # create table via r script
         * rm(list=ls())
            #steps
            x <- rep(0:254)
            #calc distribution values
            y = (x / 254)
            #plot(y)#print(y)
            data = data.frame(x,y)
            write.table(y,file='2022-12-15-transpose-table.csv', sep = ";", row.names = FALSE)

        */
        //255 linear steps 
        private static readonly float[] linearValueRange0to1 =
        {          0f,  0.00393700787401575f,  0.0078740157480315f,  0.0118110236220472f,  0.015748031496063f,  0.0196850393700787f,  0.0236220472440945f,  0.0275590551181102f,  0.031496062992126f,  0.0354330708661417f,
                  0.0393700787401575f,  0.0433070866141732f,  0.047244094488189f,  0.0511811023622047f,  0.0551181102362205f,  0.0590551181102362f,  0.062992125984252f,  0.0669291338582677f,
                  0.0708661417322835f,  0.0748031496062992f,  0.078740157480315f,  0.0826771653543307f,  0.0866141732283465f,  0.0905511811023622f,  0.094488188976378f,
                  0.0984251968503937f,  0.102362204724409f,  0.106299212598425f,  0.110236220472441f,  0.114173228346457f,  0.118110236220472f,  0.122047244094488f,
                  0.125984251968504f,  0.12992125984252f,  0.133858267716535f,  0.137795275590551f,  0.141732283464567f,  0.145669291338583f,  0.149606299212598f,  0.153543307086614f,
                  0.15748031496063f,  0.161417322834646f,  0.165354330708661f,  0.169291338582677f,  0.173228346456693f,  0.177165354330709f,  0.181102362204724f,  0.18503937007874f,
                  0.188976377952756f,  0.192913385826772f,  0.196850393700787f,  0.200787401574803f,  0.204724409448819f,  0.208661417322835f,  0.21259842519685f,  0.216535433070866f,
                  0.220472440944882f,  0.224409448818898f,  0.228346456692913f,  0.232283464566929f,  0.236220472440945f,  0.240157480314961f,  0.244094488188976f,  0.248031496062992f,
                  0.251968503937008f,  0.255905511811024f,  0.259842519685039f,  0.263779527559055f,  0.267716535433071f,  0.271653543307087f,  0.275590551181102f,  0.279527559055118f,
                  0.283464566929134f,  0.28740157480315f,  0.291338582677165f,  0.295275590551181f,  0.299212598425197f,  0.303149606299213f,  0.307086614173228f,  0.311023622047244f,
                  0.31496062992126f,  0.318897637795276f,  0.322834645669291f,  0.326771653543307f,  0.330708661417323f,  0.334645669291339f,  0.338582677165354f,  0.34251968503937f,
                  0.346456692913386f,  0.350393700787402f,  0.354330708661417f,  0.358267716535433f,  0.362204724409449f,  0.366141732283465f,  0.37007874015748f,  0.374015748031496f,
                  0.377952755905512f,  0.381889763779528f,  0.385826771653543f,  0.389763779527559f,  0.393700787401575f,  0.397637795275591f,  0.401574803149606f,  0.405511811023622f,
                  0.409448818897638f,  0.413385826771654f,  0.417322834645669f,  0.421259842519685f,  0.425196850393701f,  0.429133858267717f,  0.433070866141732f,  0.437007874015748f,
                  0.440944881889764f,  0.44488188976378f,  0.448818897637795f,  0.452755905511811f,  0.456692913385827f,  0.460629921259843f,  0.464566929133858f,  0.468503937007874f,
                  0.47244094488189f,  0.476377952755905f,  0.480314960629921f,  0.484251968503937f,  0.488188976377953f,  0.492125984251969f,  0.496062992125984f,  0.5f,
                  0.503937007874016f,  0.507874015748031f,  0.511811023622047f,  0.515748031496063f, 0.519685039370079f,  0.523622047244094f,  0.52755905511811f,  0.531496062992126f,
                  0.535433070866142f,  0.539370078740158f,  0.543307086614173f,  0.547244094488189f,  0.551181102362205f,  0.55511811023622f,  0.559055118110236f,  0.562992125984252f,
                  0.566929133858268f,  0.570866141732283f,  0.574803149606299f,  0.578740157480315f,  0.582677165354331f,  0.586614173228346f,  0.590551181102362f,  0.594488188976378f,
                  0.598425196850394f,  0.602362204724409f,  0.606299212598425f,  0.610236220472441f,  0.614173228346457f,  0.618110236220472f,  0.622047244094488f,  0.625984251968504f,
                  0.62992125984252f,  0.633858267716535f,  0.637795275590551f,  0.641732283464567f,  0.645669291338583f,  0.649606299212598f,  0.653543307086614f,  0.65748031496063f,
                  0.661417322834646f,  0.665354330708661f,  0.669291338582677f,  0.673228346456693f,  0.677165354330709f,  0.681102362204724f,  0.68503937007874f,  0.688976377952756f,
                  0.692913385826772f,  0.696850393700787f,  0.700787401574803f,  0.704724409448819f,  0.708661417322835f,  0.71259842519685f,  0.716535433070866f,  0.720472440944882f,
                  0.724409448818898f,  0.728346456692913f,  0.732283464566929f,  0.736220472440945f,  0.740157480314961f,  0.744094488188976f,  0.748031496062992f,  0.751968503937008f,
                  0.755905511811024f,  0.759842519685039f,  0.763779527559055f,  0.767716535433071f,  0.771653543307087f,  0.775590551181102f,  0.779527559055118f,  0.783464566929134f,
                  0.78740157480315f,  0.791338582677165f,  0.795275590551181f,  0.799212598425197f,  0.803149606299213f,  0.807086614173228f,  0.811023622047244f,  0.81496062992126f,
                  0.818897637795276f,  0.822834645669291f,  0.826771653543307f,  0.830708661417323f,  0.834645669291339f,  0.838582677165354f,  0.84251968503937f,  0.846456692913386f,
                  0.850393700787402f,  0.854330708661417f,  0.858267716535433f,  0.862204724409449f,  0.866141732283465f,  0.87007874015748f,  0.874015748031496f,  0.877952755905512f,
                  0.881889763779528f,  0.885826771653543f,  0.889763779527559f,  0.893700787401575f,  0.897637795275591f,  0.901574803149606f,  0.905511811023622f,  0.909448818897638f,
                  0.913385826771654f,  0.917322834645669f,  0.921259842519685f,  0.925196850393701f,  0.929133858267717f,  0.933070866141732f,  0.937007874015748f,  0.940944881889764f,
                  0.94488188976378f,  0.948818897637795f,  0.952755905511811f,  0.956692913385827f,  0.960629921259842f,  0.964566929133858f,  0.968503937007874f,  0.97244094488189f,
                  0.976377952755906f,  0.980314960629921f,  0.984251968503937f,  0.988188976377953f,  0.992125984251969f,  0.996062992125984f,  1.0f
        };

        public static byte TransposeFloatToByteRange01(float x, TransposeModus m = TransposeModus.LOG10)
        {
            //short cuts
            if (x == 0.0f)
                return 0;
            if (x == 1.0f)
                return 255;

            if (x > 1.0f)
            {
                Trace.WriteLine("warning: 20932093 transposed x out of range [0 - 1] :" + x);
                return 255;
            }
            if (x < 0.0f)
            {
                Trace.WriteLine("warning: 3425345345 transposed x out of range [0 - 1] :" + x);
                return 0;
            }
            for (byte i = 0; i < 255; i++)
            {
                if (m == TransposeModus.LOG10)
                {
                    if (log10ValueRange0to1[i] >= x)
                        return i;//TODO check always i -1 ? 
                }
                if (m == TransposeModus.LINEAR)
                {
                    if (linearValueRange0to1[i] >= x)
                        return i;
                }
            }
            return 0;
        }

        public static float TransposeByteToFloatRange01(byte x, TransposeModus m = TransposeModus.LOG10)
        {
            //short cuts
            if (x == 0)
                return 0.0f;
            if (x == 255)
                return 1.0f; 
            if (m == TransposeModus.LOG10)
            {
                return log10ValueRange0to1[x];
            }
            if (m == TransposeModus.LINEAR)
            {
                return linearValueRange0to1[x];
            }
            return -1.0f; 
        }



    }
}
